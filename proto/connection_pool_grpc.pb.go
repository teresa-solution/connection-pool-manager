// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: internal/grpc/connectionpool/connection_pool.proto

package connectionpool

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ConnectionPoolService_GetConnection_FullMethodName     = "/connectionpool.ConnectionPoolService/GetConnection"
	ConnectionPoolService_ReleaseConnection_FullMethodName = "/connectionpool.ConnectionPoolService/ReleaseConnection"
	ConnectionPoolService_GetPoolStats_FullMethodName      = "/connectionpool.ConnectionPoolService/GetPoolStats"
)

// ConnectionPoolServiceClient is the client API for ConnectionPoolService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ConnectionPoolServiceClient interface {
	// Request a connection from the pool
	GetConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error)
	// Release a connection back to the pool
	ReleaseConnection(ctx context.Context, in *ConnectionRelease, opts ...grpc.CallOption) (*ReleaseResponse, error)
	// Get pool statistics
	GetPoolStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error)
}

type connectionPoolServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConnectionPoolServiceClient(cc grpc.ClientConnInterface) ConnectionPoolServiceClient {
	return &connectionPoolServiceClient{cc}
}

func (c *connectionPoolServiceClient) GetConnection(ctx context.Context, in *ConnectionRequest, opts ...grpc.CallOption) (*ConnectionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ConnectionResponse)
	err := c.cc.Invoke(ctx, ConnectionPoolService_GetConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionPoolServiceClient) ReleaseConnection(ctx context.Context, in *ConnectionRelease, opts ...grpc.CallOption) (*ReleaseResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ReleaseResponse)
	err := c.cc.Invoke(ctx, ConnectionPoolService_ReleaseConnection_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *connectionPoolServiceClient) GetPoolStats(ctx context.Context, in *StatsRequest, opts ...grpc.CallOption) (*StatsResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatsResponse)
	err := c.cc.Invoke(ctx, ConnectionPoolService_GetPoolStats_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConnectionPoolServiceServer is the server API for ConnectionPoolService service.
// All implementations must embed UnimplementedConnectionPoolServiceServer
// for forward compatibility.
type ConnectionPoolServiceServer interface {
	// Request a connection from the pool
	GetConnection(context.Context, *ConnectionRequest) (*ConnectionResponse, error)
	// Release a connection back to the pool
	ReleaseConnection(context.Context, *ConnectionRelease) (*ReleaseResponse, error)
	// Get pool statistics
	GetPoolStats(context.Context, *StatsRequest) (*StatsResponse, error)
	mustEmbedUnimplementedConnectionPoolServiceServer()
}

// UnimplementedConnectionPoolServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedConnectionPoolServiceServer struct{}

func (UnimplementedConnectionPoolServiceServer) GetConnection(context.Context, *ConnectionRequest) (*ConnectionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetConnection not implemented")
}
func (UnimplementedConnectionPoolServiceServer) ReleaseConnection(context.Context, *ConnectionRelease) (*ReleaseResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReleaseConnection not implemented")
}
func (UnimplementedConnectionPoolServiceServer) GetPoolStats(context.Context, *StatsRequest) (*StatsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPoolStats not implemented")
}
func (UnimplementedConnectionPoolServiceServer) mustEmbedUnimplementedConnectionPoolServiceServer() {}
func (UnimplementedConnectionPoolServiceServer) testEmbeddedByValue()                               {}

// UnsafeConnectionPoolServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ConnectionPoolServiceServer will
// result in compilation errors.
type UnsafeConnectionPoolServiceServer interface {
	mustEmbedUnimplementedConnectionPoolServiceServer()
}

func RegisterConnectionPoolServiceServer(s grpc.ServiceRegistrar, srv ConnectionPoolServiceServer) {
	// If the following call pancis, it indicates UnimplementedConnectionPoolServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ConnectionPoolService_ServiceDesc, srv)
}

func _ConnectionPoolService_GetConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionPoolServiceServer).GetConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionPoolService_GetConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionPoolServiceServer).GetConnection(ctx, req.(*ConnectionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionPoolService_ReleaseConnection_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ConnectionRelease)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionPoolServiceServer).ReleaseConnection(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionPoolService_ReleaseConnection_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionPoolServiceServer).ReleaseConnection(ctx, req.(*ConnectionRelease))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConnectionPoolService_GetPoolStats_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConnectionPoolServiceServer).GetPoolStats(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ConnectionPoolService_GetPoolStats_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConnectionPoolServiceServer).GetPoolStats(ctx, req.(*StatsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ConnectionPoolService_ServiceDesc is the grpc.ServiceDesc for ConnectionPoolService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ConnectionPoolService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "connectionpool.ConnectionPoolService",
	HandlerType: (*ConnectionPoolServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetConnection",
			Handler:    _ConnectionPoolService_GetConnection_Handler,
		},
		{
			MethodName: "ReleaseConnection",
			Handler:    _ConnectionPoolService_ReleaseConnection_Handler,
		},
		{
			MethodName: "GetPoolStats",
			Handler:    _ConnectionPoolService_GetPoolStats_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "internal/grpc/connectionpool/connection_pool.proto",
}
